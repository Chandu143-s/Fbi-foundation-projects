# handwritten_digit_prediction.py

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

def load_data():
    # Load the MNIST dataset
    mnist = fetch_openml('mnist_784', version=1)
    X, y = mnist.data, mnist.target
    return X, y

def visualize_data(X, y):
    # Visualize some random samples from the dataset
    fig, axes = plt.subplots(nrows=2, ncols=5, figsize=(10, 4))
    for i, ax in enumerate(axes.flat):
        ax.imshow(X[i].reshape(28, 28), cmap='gray')
        ax.set_title("Digit: {}".format(y[i]))
        ax.axis('off')
    plt.tight_layout()
    plt.show()

def preprocess_data(X, y):
    # Normalize the feature data
    X = X / 255.0  # Scale pixel values to between 0 and 1

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

def train_model(X_train, y_train):
    # Initialize Support Vector Classifier
    svm_model = SVC(kernel='linear', random_state=42)

    # Train the model
    svm_model.fit(X_train, y_train)
    return svm_model

def evaluate_model(model, X_test, y_test):
    # Predictions
    y_pred = model.predict(X_test)

    # Evaluate accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy:", accuracy)

    # Classification report
    print("Classification Report:")
    print(classification_report(y_test, y_pred))

def main():
    # Load data
    X, y = load_data()

    # Visualize data
    visualize_data(X, y)

    # Preprocess data
    X_train, X_test, y_train, y_test = preprocess_data(X, y)

    # Train model
    model = train_model(X_train, y_train)

    # Evaluate model
    evaluate_model(model, X_test, y_test)

    # Example prediction for a single image
    example_index = 0
    predicted_digit = model.predict([X_test[example_index]])
    print("Predicted digit:", predicted_digit[0])
    print("Actual digit:", y_test[example_index])

    # Visualize the example image
    plt.imshow(X_test[example_index].reshape(28, 28), cmap='gray')
    plt.title("Predicted: {}".format(predicted_digit[0]))
    plt.axis('off')
    plt.show()

if __name__ == "__main__":
    main()
